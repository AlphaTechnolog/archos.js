#!/usr/bin/env node
const { exec } = require('child_process');

/**
 * The sh class utility
 */
class Sh {
  /**
   * Run a sh command
   * 
   * @param {string} cmd
   * @param {string} errorMsg
   * @return {Promise<string>}
   */
  run(cmd, errorMsg='Error at execute a command') {
    return new Promise((resolve, reject) => {
      exec(cmd, (err, stdout, stderr) => {
        if (err) {
          console.error(errorMsg + ': ' + err);
          process.exit(1)
        }

        resolve(stdout);
      });
    });
  }
}

const sh = new Sh()

/**
 * Make a question using readline.
 * @param {string} message
 * @returns {Promise<string>}
 */
const question = (message) => {
  const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  })

  return new Promise((resolve, reject) => {
    readline.question(message, (response) => {
      readline.close()
      resolve(response)
    })
  })
}

/**
 * Define a cli confirm.
 * @param {string} message
 * @param {boolean} defaultValue (default true)
 * @returns {Promise<boolean>}
 */
const confirm = async (message, defaultValue = true) => {
  const yn = !!defaultValue ? 'Y/n' : 'y/n'
  let response = await question(`${message} ${yn}: `)
  while (
    response.toLowerCase() !== 'y' &&
    response.toLowerCase() !== 'n' &&
    response !== ''
  ) {
    response = await question(`Invalid response. ${message} ${yn}: `)
  }

  return (
    response.toLowerCase() === 'y' ? true :
    response.toLowerCase() === 'n' ? false :
    defaultValue
  )
}

/**
 * Define a customLogger because dependencies problems
 */
class CustomLog {
  /**
   * Show a success message.
   * @param {string} message
   * @returns {void}
   */
  success (message) {
    console.log(`[S]: ${message}`)
  }

  /**
   * Show a process message.
   * @param {string} message
   * @returns {void}
   */
  process (message) {
    console.log(`[P]: ${message}`)
  }
}

const log = new CustomLog()

/**
 * Show an error in stderr and exit with status code 1
 * @param {string} message
 * @returns {void}
 */
const error = (message) => {
  console.error(message)
  process.exit(1)
}


/**
 * Main method
 * @returns {Promise<void>}
 */
const main = async () => {
  if (process.argv.length !== 3) {
    error('Invalid project name')
  }

  const projectName = process.argv[2];

  log.process('Cloning repository...')

  await sh.run(`git clone https://github.com/AlphaTechnolog/archos.js.git ${projectName}`)

  log.success('OK')
  log.process('Installing dependencies...')

  let dependencyManager = await question(
    'What dependency manager do you like to use yarn or npm? '
  )

  while (dependencyManager !== 'yarn' && dependencyManager !== 'npm') {
    dependencyManager = await question(
      'Choose a valid dependency manager yarn or npm: '
    )
  }

  const implementGit = await confirm('Do you want to implement git on your project')

  if (implementGit) {
    await sh.run(`cd ./${projectName} && ${dependencyManager} install && node ./setupProject ${dependencyManager} && rm -rf .git && git init`)
  } else {
    await sh.run(`cd ./${projectName} && ${dependencyManager} install && node ./setupProject ${dependencyManager} && rm -rf .git`)
  }

  log.success('Project created successfully, to start read this guide: https://github.com/AlphaTechnolog/archos.js')
};

main();
